//file:noinspection GroovyAssignabilityCheck
plugins {
    id 'application'
}

setupPreprocessor()

group = 'dev.rdh'
version = '0.1' + getBuildNumber()
ext.manifoldVersion = '2023.1.28'

application {
    mainClass = 'dev.rdh.imag.Main'
    applicationDefaultJvmArgs = ['-Xmx4G', '-Xms4G']
}

static String getBuildNumber() {
    String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
    return buildNumber != null ? ".build-${buildNumber}" : ""
}

repositories {
    mavenLocal()
    mavenCentral()
    flatDir { dirs 'libs' }
}

configurations {
    toInclude
}

dependencies {
    manifold 'strings'
    manifold 'preprocessor'
    include(manifold('util'))
    include("com.pngencoder:pngencoder:0.14.0")
    compileOnly 'org.jetbrains:annotations:24.0.0'

    include(fileTree(dir: 'libs', include: ['*.jar']))
}

tasks.withType(JavaCompile).configureEach {
    outputs.upToDateWhen { false }
    options.encoding = "UTF-8"
    options.release.set 17
    options.compilerArgs += ['-Xplugin:Manifold', '-Amanifold.strings.simple.disabled=true'] // don't allow simple $foo expressions
}

jar {
    duplicatesStrategy DuplicatesStrategy.WARN
    from {
        configurations.toInclude.collect { File f ->
            f.isDirectory() ? f : zipTree(f)
        }
    }
    exclude 'META-INF/maven/**'

    manifest.attributes([
            'Main-Class'              : 'dev.rdh.imag.Main',
            'Implementation-Title'    : 'imag',
            'Implementation-Version'  : project.version.split { '.build-' }[0],
            'Implementation-Vendor-Id': 'dev.rdh',
            'Implementation-Vendor'   : 'rdh',
    ])
}

run {
    outputs.upToDateWhen{false}
}

def manifold(String path) {
    def coords = "systems.manifold:manifold-${path}:${manifoldVersion}"
    dependencies {
        annotationProcessor compileOnly(coords)
    }
    return coords
}

def include(Object path) {
    dependencies {
        implementation toInclude(path)
    }
}

def setupPreprocessor() {
    String text = '# DO NOT EDIT\n'

    if(System.getenv('ideLaunch') != null)
        text += 'DEV=\n'

    new File(projectDir, "build.properties").text = text.toString()
}