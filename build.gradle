plugins {
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.27'
}

setupPreprocessor()

group = 'dev.rdh'
version = '0.1' + getBuildNumber()
ext.manifoldVersion = '2023.1.28'

application {
    mainClass = 'dev.rdh.imag.Main'
    applicationDefaultJvmArgs = ['-Xmx4G', '-Xms4G']
}

static String getBuildNumber() {
    String buildNumber = System.getenv("GITHUB_RUN_NUMBER")
    return buildNumber != null ? ".build-${buildNumber}" : ""
}

repositories {
    mavenLocal()
    mavenCentral()
}

configurations {
    include
    include.extendsFrom(implementation)
}

dependencies {
    manifold 'strings'
    manifold 'preprocessor'
    include "systems.manifold:manifold-util:${manifoldVersion}"
    runtimeOnly "systems.manifold:manifold-util:${manifoldVersion}"
    compileOnly 'org.jetbrains:annotations:24.0.0'
}

tasks.withType(JavaCompile).configureEach {
    outputs.upToDateWhen { false }
    options.encoding = "UTF-8"
    options.release.set 17
    options.compilerArgs += ['-Xplugin:Manifold', '-Amanifold.strings.simple.disabled=true'] // don't allow simple $foo expressions
}

nativeRun {
    jar {
        exclude 'META-INF/native-image/**'
    }
}

jar {
    from {
        configurations.include.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    exclude 'META-INF/maven/**'

    manifest.attributes([
            'Main-Class': 'dev.rdh.imag.Main',
            'Implementation-Title': 'imag',
            'Implementation-Version': project.version.split{'.build-'}[0],
            'Implementation-Vendor-Id': 'dev.rdh',
            'Implementation-Vendor': 'rdh',
    ])
}


graalvmNative {
    testSupport = false

    binaries.configureEach {
        resources.autodetect()
    }
    toolchainDetection = false

    binaries {
        main {
            imageName = 'imag'
            def args = [
                    '--verbose', '--no-fallback',
                    //'-Dgraal.CompilerConfiguration=enterprise',
                    //'-Dgraal.TuneInlinerExploration=0'
            ]
            args.forEach(buildArgs::add)
            javaLauncher = javaToolchains.launcherFor {
                languageVersion = JavaLanguageVersion.of(17)
                vendor = JvmVendorSpec.matching('GraalVM Community')
            }
        }
    }

    agent {
        //idk man
    }
}


def manifold(String path) {
    def coords = "systems.manifold:manifold-${path}:${manifoldVersion}"
    dependencies {
        annotationProcessor coords
        compileOnly coords
    }
}

def setupPreprocessor() {
    String text = '# DO NOT EDIT\n'

    if(System.getenv('ideLaunch') != null)
        text += 'DEV=\n'

    new File(projectDir, "build.properties").text = text.toString()
}